#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
HW 3: Saving Derek Zoolander
\end_layout

\begin_layout Author
Anamol Pundle
\end_layout

\begin_layout Abstract
Corrupted images of the 3-time male model of the year Derek Zoolander have
 been partially restored in this work.
 The first set of images appear to have been corrupted with the addition
 of white noise, while Derek has an unseemly rash near his nose on the second.
 Linear filtering as well as diffusion techniques are used to restore Derek's
 pictures.
 A Gaussian filter is used on the images in frequency domain, which removes
 unwanted high frequency content.
 Another technique used is the removal of all frequency content whose amplitude
 falls below a certain threshold.
 Removal of the rash from the second set of images is accomplished by local
 diffusion of the rash.
 Different values of the parameters for diffusion, Gaussian filtering and
 thresholding are considered and the best parameters chosen.
\end_layout

\begin_layout Section
Introduction and Overview
\end_layout

\begin_layout Standard
As with time-frequency analysis and de-noising of time signals, many application
s of image processing deal with cleaning up images from imperfections, pixelatio
n, and graininess, i.e.
 processing of noisy images.
 The objective in any image processing application is to enhance or improve
 the quality of a given image.
 In this section, the filtering of noisy images will be considered with
 the aim of providing a higher quality, maximally de-noised image.
\end_layout

\begin_layout Standard
In this work, grayscale and colored images are cleaned up using linear filtering
, through the use of a Gaussian filter.
 Different filter widths are explored in order to get the best result.
 Removal of a rash, which is a localized noisy patch in the image, is undertaken
 using diffusion.
 The effect of the parameters of diffusion such as the time span and diffusion
 coefficient on the solution is also explored.
\end_layout

\begin_layout Section
Theoretical Background
\end_layout

\begin_layout Standard
Linear filtering can be applied in the Fourier domain of the image in order
 to remove the high-frequency scale fluctuations induced by the noise.
 A simple filter to consider is a Gaussian that takes the form:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
F(k_{x},k_{y})=exp(-\sigma_{x}(k_{x}-a)^{2}-\sigma_{y}(k_{y}-b)^{2})
\]

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $\sigma_{x}$
\end_inset

 and 
\begin_inset Formula $\sigma_{y}$
\end_inset

 are the filter widths in the x and y directions respectively and a and
 b are the center-frequency values for the corresponding filtering.
\end_layout

\begin_layout Standard
Filtering is not the only way to de-noise an image.
 Intimately related to filtering is the use of diffusion for image enhancement.
 Consider for the moment the simplest spatial diffusion process in two dimension
s, i.e.
 the heat equation: 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
u_{t}=D\nabla^{2}u
\]

\end_inset


\end_layout

\begin_layout Standard
where u(x,y) will represent a given image, D is a diffusion coefficient,
 and some boundary conditions must be imposed.
 If for the moment we consider periodic boundary conditions, then the solution
 to the heat equation can be found from, for instance, the Fourier transform.
 The solution of the heat equation illustrates a key and critical concept:
 the wave numbers (spatial frequencies) decay according to a Gaussian function.
 Thus linear filtering with a Gaussian is equivalent to a linear diffusion
 of the image for periodic boundary conditions.
 To solve the heat equation numerically, we discretize the spatial derivative
 with a second-order scheme.
 This approximation reduces the partial differential equation to a system
 of ordinary differential equations.
 Once this is accomplished, then a variety of standard time-stepping schemes
 for differential equations can be applied to the resulting system.
\end_layout

\begin_layout Section
Algorithm Implementation and Development
\end_layout

\begin_layout Standard
Different algorithms are developed for de-noising the first set of photographs
 and removing the rash from the second set.
 Both are listed in this section.
 All images are 253 pixels by 361 pixels in size.
\end_layout

\begin_layout Subsection
Algorithm for de-noising first set of images
\end_layout

\begin_layout Itemize
Both the images (color and grayscale) are imported into MATLAB using the
 
\family typewriter
imread
\family default
 function.
\end_layout

\begin_deeper
\begin_layout Itemize
The color image is stored as a 
\begin_inset Formula $235\times361\times3$
\end_inset

 matrix, i.e., a 
\begin_inset Formula $235\times365$
\end_inset

 matrix each for R, G and B data.
 The grayscale image is stored as a 
\begin_inset Formula $235\times361$
\end_inset

 matrix.
\end_layout

\end_deeper
\begin_layout Itemize
Both images are converted into floating point numbers using the 
\family typewriter
double
\family default
 function.
 
\end_layout

\begin_layout Itemize
Grid vectors are defined using the 
\family typewriter
meshgrid
\family default
 function.
\end_layout

\begin_layout Itemize
The Fourier transform of each 
\begin_inset Formula $235\times361$
\end_inset

 matrix of the color and grayscale matrix is taken using the 
\family typewriter
fft2
\family default
 function, and shifted using the 
\family typewriter
fftshift
\family default
 function.
\end_layout

\begin_layout Itemize
A Gaussian function in x and y centered at centre of the frequency spectrum
 is defined.
 The spread of the function is calculated heuristically.
\end_layout

\begin_deeper
\begin_layout Itemize
The Gaussian function used is 
\begin_inset Formula $g(K_{x},K_{y})=e^{-D((K_{x}-126.5)^{2}+(K_{y}-180.5)^{2})}$
\end_inset

.
 The parameter D is varied to get the best result.
\end_layout

\end_deeper
\begin_layout Itemize
Each frequency matrix is multiplied by the Gaussian function to form a new
 matrix.
\end_layout

\begin_layout Itemize
Separate from the previous step, all elements in each frequency matrix below
 a certain frequency threshold are set to zero.
 
\end_layout

\begin_layout Itemize
The inverse Fourier transform of each matrix is taken using the 
\family typewriter
ifft2
\family default
 function.
\end_layout

\begin_layout Itemize
Images are plotted and parameters such as the frequency threshold and spread
 of the Gaussian function are varied to obtain the best result.
\end_layout

\begin_deeper
\begin_layout Itemize
The 
\family typewriter
image
\family default
 function is used to plot the color image, while the 
\family typewriter
imshow
\family default
 function is used to plot the grayscale image.
\end_layout

\end_deeper
\begin_layout Subsection
Algorithm for removing the rash
\end_layout

\begin_layout Itemize
Both the images (color and grayscale) are imported into MATLAB using the
 
\family typewriter
imread
\family default
 function.
\end_layout

\begin_deeper
\begin_layout Itemize
The color image is stored as a 
\begin_inset Formula $235\times361\times3$
\end_inset

 matrix, i.e., a 
\begin_inset Formula $235\times365$
\end_inset

 matrix each for R, G and B data.
 The grayscale image is stored as a 
\begin_inset Formula $235\times361$
\end_inset

 matrix.
\end_layout

\end_deeper
\begin_layout Itemize
Both images are converted into floating point numbers using the 
\family typewriter
double
\family default
 function.
 
\end_layout

\begin_layout Itemize
The rash portion of the image is identified and stored in a different matrix
 for both images.
\end_layout

\begin_layout Itemize
The sparse diagonal matrix for the x and y directions Ax and Ay is constructed
 using the spdiags function.
\end_layout

\begin_layout Itemize
A diffusion coefficient D is also defined.
 This is determined heuristically.
\end_layout

\begin_layout Itemize
The Laplacian operator L is constructed from Ax and Ay using the kron function.
\end_layout

\begin_layout Itemize
A time span vector for the diffusion of the image is defined.
 
\end_layout

\begin_layout Itemize
The image of the rash is reshaped into a 
\begin_inset Formula $n_{x}\times n_{y}$
\end_inset

 matrix, where 
\begin_inset Formula $n_{x}$
\end_inset

 and 
\begin_inset Formula $n_{y}$
\end_inset

are defined by the size of the image.
\end_layout

\begin_deeper
\begin_layout Itemize
This is done because the ODE solver function does not take a two dimensional
 input.
\end_layout

\end_deeper
\begin_layout Itemize
The image is passed to the ODE solver function, ode113, along with the time
 span vector, the Laplacian vector, the diffusion coefficient and the function
 for the right hand side of the finite difference equation.
\end_layout

\begin_deeper
\begin_layout Itemize
The right hand side function is given by 
\begin_inset Formula $D(L\text{\times u)}$
\end_inset

 where u is the reshaped image matrix.
\end_layout

\end_deeper
\begin_layout Itemize
The resulting matrices are reshaped into 
\begin_inset Formula $n_{x}\times n_{y}$
\end_inset

 matrices using the 
\family typewriter
reshape
\family default
 function.
 
\end_layout

\begin_deeper
\begin_layout Itemize
This is tricky for the color image, since three different matrices need
 to be reshaped and combined to get the final image.
\end_layout

\end_deeper
\begin_layout Itemize
The rash images are re-inserted into the main image and displayed using
 the 
\family typewriter
image
\family default
 function for the colored image and the 
\family typewriter
imshow
\family default
 function for the grayscale image.
\end_layout

\begin_layout Section
Computational Results
\end_layout

\begin_layout Subsection
Task 1
\end_layout

\begin_layout Standard
Figure 1 shows the effect of Gaussian filtering on the colored image.
 Figure 1(a) is the unfiltered image, and is seen to have a lot of distortion
 due to noise.
 With a filter width factor D (as defined in the Gaussian function in Section
 3) of 
\begin_inset Formula $4\times10^{-4}$
\end_inset

, some of the high frequency noise is taken out, though a blurring effect
 on the picture is noted.
 As D is increased to 
\begin_inset Formula $10^{-3}$
\end_inset

, further noise reduction is noted, along with more blurring.
 Further increase of D does not have good results; the final image, with
 a D of 
\begin_inset Formula $10^{-2}$
\end_inset

, is exceedingly blurred.
 Therefore, the image with 
\begin_inset Formula $D=4\times10^{-4}$
\end_inset

 is arguably the best image.
 A similar effect is noted for the grayscale image.
 The image gets more blurred as D is increased (corresponding to a decrease
 in filter width).
 At a D of 
\begin_inset Formula $10^{-2}$
\end_inset

, the image is virtually unrecognizable, whereas a D of 
\begin_inset Formula $1\times10^{-4}$
\end_inset

 arguably gives the best result.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename T1org.jpg
	width 6cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Original Image
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename T14e-4.jpg
	width 6cm

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Filter width factor D = 
\begin_inset Formula $4\times10^{-4}$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename T110-3.jpg
	width 6cm

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Filter width factor D =
\begin_inset Formula $10^{-3}$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename T110-2.jpg
	width 6cm

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Filter width factor D =
\begin_inset Formula $10^{-2}$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Comparison of picture quality for three filter widths and the original colored
 image.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename bworg.png
	width 5.5cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Original image
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename bw10-4.png
	width 5.5cm

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Filter width factor D = 
\begin_inset Formula $1\times10^{-4}$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename bw10-3.png
	width 5.5cm

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Filter width factor D = 
\begin_inset Formula $1\times10^{-3}$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename bw10-2.png
	width 5.5cm

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Filter width factor D = 
\begin_inset Formula $1\times10^{-2}$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Comparison of picture quality for three filter widths and the original grayscale
 image.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 3 shows the result of the removing all frequencies with an amplitude
 below a certain threshold.
 Figure 3(a) shows the result of removing all frequencies with an amplitude
 less than 
\begin_inset Formula $(1/800)^{th}$
\end_inset

 of the maximum amplitude.
 Reasonably good filtering is achieved.
 Figure 3(b) shows the result of removing all frequencies with an amplitude
 less than 
\begin_inset Formula $(1/500)^{th}$
\end_inset

 of the maximum amplitude.
 The image is quite blurred.
 Therefore, lowering the threshold to a particular value may result in some
 filtering, but lowering it further will excessively blur the image.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename T1a8e2.jpg
	width 5.5cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Threshold = 
\begin_inset Formula $\frac{MaxAmplitude}{800}$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename T1a5e2.jpg
	width 5.5cm

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Threshold = 
\begin_inset Formula $\frac{MaxAmplitude}{500}$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Comparison of picture quality obtained by removing frequencies below different
 thresholds of amplitude 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Task 2
\end_layout

\begin_layout Standard
Figure 4 shows the result of performing diffusion on the rash portion colored
 image.
 It is found that a short time span and a relatively small diffusion constant
 gives good results.
 Figure 4(a) is the original image, where the rash is clearly visible.
 As more diffusion is applied, the rash starts to disappear.
 Figure 4(d) shows the final result of the diffusion, with a time of 0.01
 and a diffusion constant of 0.1.
 The rash is almost invisible.
 The same steps are repeated for the black and white image, with results
 shown in Figure 5.
 The diffusion constant D is reduced to 0.08 for the black and white image,
 and the best result is found at t = 0.01.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename Rashorg.jpg
	width 6cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Original image
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Rash2.jpg
	width 6cm

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
t = 0.002
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Rash4.jpg
	width 6cm

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
t = 0.004
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Rash10.jpg
	width 6cm

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
t = 0.01
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Image de-noising process for colored image for a diffusion constant of D
 = 0.1 as a function of time for t = 0, 0.002, 0.004 and 0.01.
 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename rashorgbw.png
	width 5.5cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Original image
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename rash2bw.png
	width 5.5cm

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
t = 0.002
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename rash4bw.png
	width 5.5cm

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
t = 0.004
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename rash16bw.png
	width 5.5cm

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
t = 0.016
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Image de-noising process for a grayscale image for diffusion constant of
 D = 0.08 as a function of time for t = 0, 0.002, 0.004 and 0.016.
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Further, Gaussian filtering is applied to the image in order to smooth out
 the rash.
 Figure 6 shows the black and white image after a Gaussian filter with filter
 width constant 
\begin_inset Formula $D=10^{-4}$
\end_inset

.
 The boundaries of the rash and the rest of the image get a little blurred,
 which leads makes the image look more realistic.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diffused.png
	width 5.5cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Image after diffusion filtered with Gaussian filter, 
\begin_inset Formula $D=10^{-4}$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Rash10.jpg
	width 5.5cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Image after diffusion filtered with Gaussian filter, 
\begin_inset Formula $D=4\times10^{-4}$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Images after diffusion filtered with Gaussian filter
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Summary and Conclusion
\end_layout

\begin_layout Standard
Corrupted colored and grayscale images of Derek Zoolander were filtered
 using a Gaussian filter with varying filter width.
 An appropriately sized Gaussian filter was shown to be somewhat effective
 in cleaning up both images.
 
\end_layout

\begin_layout Standard
A rash was removed from Zoolander's images by applying diffusion locally
 to the images.
 It was seen that a relatively small diffusion constant and a short period
 of time is enough for the rash to be removed.
 A greater amount of time results in over-filtering the image.
 A Gaussian filter was applied to the images after removing the rash, in
 order to blur the boundary of the rash and the rest of the image.
\end_layout

\begin_layout Section*
References
\end_layout

\begin_layout Enumerate
Kutz, J.
 Nathan, Data-Driven Modeling & Scientific Computation: Methods for Complex
 Systems & Big Data, September 2013
\end_layout

\begin_layout Enumerate
Matlab help
\end_layout

\begin_layout Section*
Appendix I: MATLAB functions used
\end_layout

\begin_layout Standard

\family typewriter
imread
\family default
: reads images into MATLAB
\end_layout

\begin_layout Itemize

\family typewriter
A = imread(FILENAME,FMT)
\family default
 reads a grayscale or color image from the file specified by the string
 FILENAME.
 If the file is not in the current directory, or in a directory on the MATLAB
 path, specify the full pathname.
\end_layout

\begin_layout Standard

\family typewriter
double
\family default
: converts to double precision
\end_layout

\begin_layout Itemize

\family typewriter
double(X)
\family default
 returns the double precision value for X.
 If X is already a double precision array, 
\family typewriter
double
\family default
 has no effect.
\end_layout

\begin_layout Standard

\family typewriter
uint8
\family default
: converts to unsigned 8-bit integer
\end_layout

\begin_layout Itemize

\family typewriter
I = uint8(X) 
\family default
converts the elements of the array X into unsigned 8-bit integers.
 X can be any numeric object, such as a DOUBLE.
\end_layout

\begin_layout Standard

\family typewriter
spdiags
\family default
: sparse matrix formed from diagonals
\end_layout

\begin_layout Itemize

\family typewriter
[B,d] = spdiags(A)
\family default
 extracts all nonzero diagonals from the m-by-n matrix A.
 B is a min(m,n)-by-p matrix whose columns are the p nonzero diagonals of
 A.
 d is a vector of length p whose integer components specify the diagonals
 in A.
\end_layout

\begin_layout Standard

\family typewriter
reshape
\family default
: reshapes array
\end_layout

\begin_layout Itemize
r
\family typewriter
eshape(X,M,N)
\family default
 or
\family typewriter
 reshape(X,[M,N])
\family default
 returns the M-by-N matrix whose elements are taken columnwise from X.
 An error results if X does not have M*N elements.
\end_layout

\begin_layout Standard

\family typewriter
imshow
\family default
: displays image
\end_layout

\begin_layout Itemize

\family typewriter
imshow(I)
\family default
 displays the image I in a Handle Graphics figure, where I is a grayscale,
 RGB (truecolor), or binary image.
 For binary images, 
\family typewriter
imshow
\family default
 displays pixels with the value 0 (zero) as black and 1 as white.
\end_layout

\begin_layout Standard

\family typewriter
ode113
\family default
: solve non-stiff differential equations, variable order method.
\end_layout

\begin_layout Itemize
[
\family typewriter
TOUT,YOUT] = ode113(ODEFUN,TSPAN,Y0)
\family default
 with 
\family typewriter
TSPAN = [T0 TFINAL]
\family default
 integrates the system of differential equations y' = f(t,y) from time T0
 to TFINAL with initial conditions Y0.
 
\family typewriter
ODEFUN
\family default
 is a function handle.
 For a scalar T and a vector Y, 
\family typewriter
ODEFUN(T,Y)
\family default
 must return a column vector corresponding to f(t,y).
 Each row in the solution array 
\family typewriter
YOUT
\family default
 corresponds to a time returned in the column vector 
\family typewriter
TOUT
\family default
.
 To obtain solutions at specific times 
\family typewriter
T0,T1,...,TFINAL
\family default
 (all increasing or all decreasing), use 
\family typewriter
TSPAN = [T0 T1 ...
 TFINAL]
\family default
.
\end_layout

\begin_layout Section*
Appendix II: MATLAB code
\end_layout

\begin_layout Standard
MATLAB code for task 1
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
clear all; close all; clc
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\color blue
% read images
\end_layout

\begin_layout Standard

\family typewriter
Img1 = imread('derek1','jpg'); 
\end_layout

\begin_layout Standard

\family typewriter
Img2 = imread('derek2', 'jpg');
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\color blue
%convert images to double precision
\end_layout

\begin_layout Standard

\family typewriter
Img1 = double(Img1); 
\end_layout

\begin_layout Standard

\family typewriter
Img2 = double(Img2); 
\end_layout

\begin_layout Standard

\family typewriter
[nx ny nz] = size(Img1);
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\color blue
%define parameters for Gaussian function
\end_layout

\begin_layout Standard

\family typewriter
gaussmult = 0.0001; gaussmult2 = 0.0001;
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\color blue
%define grid vectors
\end_layout

\begin_layout Standard

\family typewriter
x = 1:nx; y = 1:ny; [Kx, Ky] = meshgrid(x, y);
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
for ii = 1:3
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Img1f = fftshift(fft2(Img1(:,:,ii))); 
\color blue
%fft of image matrix
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color blue
%define Gaussian function
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

gauss = exp(-gaussmult*(Kx-nx/2).^2 - gaussmult*(Ky-ny/2).^2); 
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Img1f = Img1f.*gauss'; 
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Imax = max(max(abs(Img1f))); 
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color blue
%Set threshold and set everything below threshold to 0
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Img1cleara(:,:,ii) = ifft2(Img1f); 
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Img1f = fftshift(fft2(Img1(:,:,ii))); 
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for jj = 1:nx 
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

for kk = 1:ny 
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

if abs(Img1f(jj, kk)) < (Imax/800) 
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Img1f(jj, kk) = 0; 
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end 
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end 
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

end
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color blue
%Inverse fft of image
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Img1clearb(:,:,ii) = ifft2(Img1f); 
\end_layout

\begin_layout Standard

\family typewriter
end
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
Img1cleara = uint8(abs(Img1cleara)); 
\end_layout

\begin_layout Standard

\family typewriter
Img1clearb = uint8(abs(Img1clearb));
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\color blue
%Same steps for grayscale image
\end_layout

\begin_layout Standard

\family typewriter
Img2f = fftshift(fft2(Img2)); 
\end_layout

\begin_layout Standard

\family typewriter
gauss = exp(-gaussmult*(Kx-126.5).^2 - gaussmult*(Ky-180.5).^2); 
\end_layout

\begin_layout Standard

\family typewriter
Img2f = Img2f.*gauss'; 
\end_layout

\begin_layout Standard

\family typewriter
Img2clear = (abs((ifft2(Img2f))));
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
MATLAB code for task 2
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
clear all; close all; clc;
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\color blue
%read images
\end_layout

\begin_layout Standard

\family typewriter
Img1 = imread('derek3', 'jpg'); 
\end_layout

\begin_layout Standard

\family typewriter
Img2 = imread('derek4', 'jpg');
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
gaussmult = 0.0001;
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\color blue
%save rash in different matrix
\end_layout

\begin_layout Standard

\family typewriter
Rash1 = Img1(135:165, 155:185, :); 
\end_layout

\begin_layout Standard

\family typewriter
Rash2 = Img2(135:165, 155:185); 
\end_layout

\begin_layout Standard

\family typewriter
Rash1 = double(Rash1); 
\end_layout

\begin_layout Standard

\family typewriter
Rash2 = double(Rash2);
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
[nx, ny, nz] = size(Rash1); 
\end_layout

\begin_layout Standard

\family typewriter
x = linspace(0,1,nx); y = linspace(0,1,ny); 
\end_layout

\begin_layout Standard

\family typewriter
dx = x(2)-x(1); dy = y(2)-y(1);
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\color blue
%define Laplacian matrix
\end_layout

\begin_layout Standard

\family typewriter
el = ones(nx,1); Ax = spdiags([el -2*el el],[-1 0 1],nx,nx)/(dx^2); Ix =
 eye(nx); 
\end_layout

\begin_layout Standard

\family typewriter
Ay = spdiags([el -2*el el],[-1 0 1],ny,ny)/(dy^2); Iy = eye(ny); 
\end_layout

\begin_layout Standard

\family typewriter
L = kron(Iy, Ax) + kron(Ay, Ix);
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
tspan = [0 0.002 0.004 0.01]; D = 0.1;
\end_layout

\begin_layout Standard

\family typewriter
Rash1r = reshape(Rash1, nx*ny, 3); 
\color blue
%reshape for ode113
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
for ii = 1:3 
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color blue
%solve for diffusion
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

[t usol1] = ode113('RHSfunc', tspan, Rash1r(:, ii),[],L, D); 
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

u1(:,:,ii) = usol1;
\end_layout

\begin_layout Standard

\family typewriter
end
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
for ii = 1:3 
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\color blue
%reshape to display
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

U1(:,:,ii) = reshape(u1(4,:,ii), nx, ny); 
\end_layout

\begin_layout Standard

\family typewriter
end
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\color blue
%add diffused rash back to original image
\end_layout

\begin_layout Standard

\family typewriter
Img1(140:160, 160:180, :) = U1(6:26, 6:26, :);
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\color blue
%repeat for grayscale image
\end_layout

\begin_layout Standard

\family typewriter
Rash2r = reshape(Rash2, nx*ny, 1); 
\end_layout

\begin_layout Standard

\family typewriter
[t usol2] = ode113('RHSfunc', tspan, Rash2r,[],L, D); 
\end_layout

\begin_layout Standard

\family typewriter
U2 = reshape(usol2(4,:),nx, ny);
\end_layout

\begin_layout Standard

\family typewriter
Img2(140:160, 160:180, :) = U2(6:26, 6:26, :);
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\color blue
%Gaussian filtering on image
\end_layout

\begin_layout Standard

\family typewriter
x = 1:253; y = 1:361; [Kx, Ky] = meshgrid(x, y); 
\end_layout

\begin_layout Standard

\family typewriter
gauss = exp(-gaussmult*(Kx-126.5).^2 - gaussmult*(Ky-180.5).^2); 
\end_layout

\begin_layout Standard

\family typewriter
Img2f = fftshift(fft2(Img2)); 
\end_layout

\begin_layout Standard

\family typewriter
Img2f = Img2f.*gauss'; 
\end_layout

\begin_layout Standard

\family typewriter
Img2clear = (abs((ifft2(Img2f))));
\end_layout

\end_body
\end_document
